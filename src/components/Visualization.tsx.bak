'use client';
import React, { useEffect, useRef, useState, useCallback } from 'react';
import * as THREE from 'three';
// Import from our local module which handles the compatibility issues
import { OrbitControls } from '../lib/orbitControls';
import { BuildingParameters, CalculationResults } from '../lib/types';
import { OrbitControls as OrbitControlsType } from '../lib/orbitalTypes';
import { getMaterial } from '../lib/materials';

// Add new imports for color utilities
import { interpolateRgb } from '../lib/colorUtils';

interface VisualizationProps {
  parameters: BuildingParameters;
  results: CalculationResults;
}

export const Visualization: React.FC<VisualizationProps> = ({ parameters, results }) => {
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef<THREE.Scene>(new THREE.Scene());
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);
  const controlsRef = useRef<OrbitControlsType | null>(null);
  const requestRef = useRef<number | null>(null);
  //const lightsRef = useRef<THREE.Light[]>([]);
  const gridRef = useRef<THREE.GridHelper | null>(null);
  
  const [showDeformed, setShowDeformed] = useState(false);
  const [deformationScale, setDeformationScale] = useState(10);
  const [viewMode, setViewMode] = useState<'default' | 'stress' | 'deflection'>('default');
  const [backgroundColor] = useState('#f8fafc'); // Light background
  const [showGrid, setShowGrid] = useState(true);
  const [showShadows, setShowShadows] = useState(true);
  
  // Add new visualization states
  //const [showStressHeatmap, setShowStressHeatmap] = useState(false);
  const [showModalShapes, setShowModalShapes] = useState(false);
  const [selectedMode, setSelectedMode] = useState<number>(0); // First mode by default
  
  // Refs for Three.js objects
  const originalGeometryRef = useRef<{
    columns: THREE.Mesh[];
    beamsX: THREE.Mesh[];
    beamsZ: THREE.Mesh[];
    slabs: THREE.Mesh[];
  } | null>(null);
  const heatmapMaterialsRef = useRef<{
    beams: THREE.Material[];
    columns: THREE.Material[];
  }>({ beams: [], columns: [] });
  const modalShapesRef = useRef<THREE.Group | null>(null);
  
  // Helper functions for creating geometry
  const createBeam = (length: number, width: number, height: number, position: THREE.Vector3, rotation: THREE.Euler, material: THREE.Material): THREE.Mesh => {
    const geometry = new THREE.BoxGeometry(length, height, width);
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.copy(position);
    mesh.rotation.copy(rotation);
    return mesh;
  };
  
  const createColumn = (width: number, height: number, depth: number, position: THREE.Vector3, material: THREE.Material): THREE.Mesh => {
    const geometry = new THREE.BoxGeometry(width, height, depth);
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.copy(position);
    return mesh;
  };
  
  const createSlab = (length: number, thickness: number, width: number, position: THREE.Vector3, material: THREE.Material): THREE.Mesh => {
    const geometry = new THREE.BoxGeometry(length, thickness, width);
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.copy(position);
    return mesh;
  };
  
  // Handle resize to make the visualization responsive
  const handleResize = useCallback(() => {
    if (!mountRef.current || !cameraRef.current || !rendererRef.current) return;
    
    const width = mountRef.current.clientWidth;
    const height = mountRef.current.clientHeight;
    
    // Update camera
    cameraRef.current.aspect = width / height;
    cameraRef.current.updateProjectionMatrix();
    
    // Update renderer
    rendererRef.current.setSize(width, height);
  }, [mountRef, cameraRef, rendererRef]);

  // Initialize Three.js scene
  const initScene = useCallback(() => {
    if (!mountRef.current) return null;
    
    // Create scene
    const scene = sceneRef.current;
    scene.background = new THREE.Color(backgroundColor);
    
    // Create camera
    const aspectRatio = mountRef.current.clientWidth / mountRef.current.clientHeight;
    const camera = new THREE.PerspectiveCamera(45, aspectRatio, 0.1, 1000);
    camera.position.set(20, 20, 20);
    camera.lookAt(0, 0, 0);
    
    // Create renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    mountRef.current.appendChild(renderer.domElement);
    
    // Create controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    
    // Add grid helper
    if (showGrid) {
      const gridSize = Math.max(parameters.buildingLength, parameters.buildingWidth) * 2;
      const gridDivisions = 20;
      const grid = new THREE.GridHelper(gridSize, gridDivisions, 0x888888, 0xcccccc);
      scene.add(grid);
      gridRef.current = grid;
    }
    
    return { camera, renderer, controls };
  }, [parameters, showGrid]);

  // Build geometry based on parameters
  const buildGeometry = useCallback(() => {
    const scene = sceneRef.current;
    
    // Clear previous geometry but keep lights and grid
    if (originalGeometryRef.current) {
      const { beamsX, beamsZ, columns, slabs } = originalGeometryRef.current;
      
      // Remove existing geometry
      beamsX.forEach(beam => scene.remove(beam));
      beamsZ.forEach(beam => scene.remove(beam));
      columns.forEach(column => scene.remove(column));
      slabs.forEach(slab => scene.remove(slab));
      
      // Clear arrays
      beamsX.length = 0;
      beamsZ.length = 0;
      columns.length = 0;
      slabs.length = 0;
    }
    
    // Initialize geometry arrays if not already done
    if (!originalGeometryRef.current) {
      originalGeometryRef.current = {
        beamsX: [],
        beamsZ: [],
        columns: [],
        slabs: []
      };
    }
    
    // Get material based on parameters
    const materialParams = getMaterial(parameters.materialName || 'steel');
    
    // Create materials for different structural elements
    const beamMaterial = new THREE.MeshStandardMaterial({
      color: materialParams.color,
      metalness: materialParams.metalness,
      roughness: materialParams.roughness
    });
    
    const columnMaterial = new THREE.MeshStandardMaterial({
      color: materialParams.color,
      metalness: materialParams.metalness,
      roughness: materialParams.roughness
    });
    
    const slabMaterial = new THREE.MeshStandardMaterial({
      color: 0xcccccc,
      metalness: 0.1,
      roughness: 0.7
    });
    
    // Create grid
    if (showGrid) {
      // Grid implementation
    }
    
    // Add ambient and directional light for better visualization
    if (scene.children.length < 3) {
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 20, 15);
      
      if (showShadows) {
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 2048;
        directionalLight.shadow.mapSize.height = 2048;
        directionalLight.shadow.camera.near = 0.5;
        directionalLight.shadow.camera.far = 50;
        directionalLight.shadow.camera.left = -20;
        directionalLight.shadow.camera.right = 20;
        directionalLight.shadow.camera.top = 20;
        directionalLight.shadow.camera.bottom = -20;
      }
      
      scene.add(directionalLight);
    }
    
    // Create building geometry based on parameters
    const { buildingLength, buildingWidth, buildingHeight, numberOfStoreys, beamWidth, beamHeight, columnWidth, columnDepth } = parameters;
    
    // Create beams along X-axis
    for (let floor = 1; floor <= numberOfStoreys; floor++) {
      for (let j = 0; j <= parameters.beamsAlongWidth; j++) {
        const beam = createBeam(
          buildingLength,
          beamWidth,
          beamHeight,
          new THREE.Vector3(
            0,
            floor * buildingHeight,
            -buildingWidth / 2 + j * (buildingWidth / parameters.beamsAlongWidth)
          ),
          new THREE.Euler(0, 0, 0),
          beamMaterial
        );
        
        scene.add(beam);
        originalGeometryRef.current.beamsX.push(beam);
      }
    }
    
    // Create beams along Z-axis
    for (let floor = 1; floor <= numberOfStoreys; floor++) {
      for (let i = 0; i <= parameters.beamsAlongLength; i++) {
        const beam = createBeam(
          buildingWidth,
          beamWidth,
          beamHeight,
          new THREE.Vector3(
            -buildingLength / 2 + i * (buildingLength / parameters.beamsAlongLength),
            floor * buildingHeight,
            0
          ),
          new THREE.Euler(0, Math.PI / 2, 0),
          beamMaterial
        );
        
        scene.add(beam);
        originalGeometryRef.current.beamsZ.push(beam);
      }
    }
    
    // Create columns
    for (let floor = 0; floor < numberOfStoreys; floor++) {
      for (let i = 0; i <= parameters.columnsAlongLength; i++) {
        for (let j = 0; j <= parameters.columnsAlongWidth; j++) {
          const column = createColumn(
            columnWidth,
            buildingHeight,
            columnDepth,
            new THREE.Vector3(
              -buildingLength / 2 + i * (buildingLength / parameters.columnsAlongLength),
              floor * buildingHeight + buildingHeight / 2,
              -buildingWidth / 2 + j * (buildingWidth / parameters.columnsAlongWidth)
            ),
            columnMaterial
          );
          
          scene.add(column);
          originalGeometryRef.current.columns.push(column);
        }
      }
    }
    
    // Create slabs
    for (let floor = 0; floor <= numberOfStoreys; floor++) {
      const slab = createSlab(
        buildingLength,
        parameters.slabThickness,
        buildingWidth,
        new THREE.Vector3(
          0,
          floor * buildingHeight,
          0
        ),
        slabMaterial
      );
      
      scene.add(slab);
      originalGeometryRef.current.slabs.push(slab);
    }
  }, [parameters, showGrid, showShadows]);

  // Function to handle deformed geometry visualization
  const showDeformedGeometry = useCallback((scale: number) => {
    if (!results || !originalGeometryRef.current) return;
    
    // Get deformation results
    const { maxBeamDeflection } = results;
    
    // Apply deformation to beams
    originalGeometryRef.current.beamsX.forEach((beam, index) => {
      // Calculate deformation for this beam
      const deformation = results.beamResults[index % results.beamResults.length].maxDeflection;
      const normalizedDeformation = deformation / maxBeamDeflection;
      
      // Apply deformation visually (simplified)
      beam.position.y -= normalizedDeformation * scale * 0.01;
    });
    
    originalGeometryRef.current.beamsZ.forEach((beam, index) => {
      // Calculate deformation for this beam
      const deformation = results.beamResults[index % results.beamResults.length].maxDeflection;
      const normalizedDeformation = deformation / maxBeamDeflection;
      
      // Apply deformation visually (simplified)
      beam.position.y -= normalizedDeformation * scale * 0.01;
    });
  }, [results]);

  // Function to reset deformed geometry
  const resetDeformedGeometry = useCallback(() => {
    if (!originalGeometryRef.current) return;
    
    // Reset beam positions
    originalGeometryRef.current.beamsX.forEach((beam) => {
      // Reset to original position
      beam.position.y = Math.floor(beam.position.y) + parameters.beamHeight / 2;
    });
    
    originalGeometryRef.current.beamsZ.forEach((beam) => {
      // Reset to original position
      beam.position.y = Math.floor(beam.position.y) + parameters.beamHeight / 2;
    });
  }, [parameters.beamHeight]);

  // Function to apply stress heatmap
  const applyStressHeatmap = useCallback(() => {
    if (!results || !originalGeometryRef.current) return;
    
    const maxBeamStress = results.maxBeamStress;
    // Calculate maxColumnStress and use it in the implementation
    const maxColumnStress = results.maxColumnStress;
    
    // Reset materials array
    heatmapMaterialsRef.current = {
      beams: [],
      columns: []
    };
    
    // Apply heatmap to beams
    originalGeometryRef.current.beamsX.forEach((beam: THREE.Mesh, index) => {
      // Get stress for this beam (map to corresponding result)
      const normalizedStress = Math.min(results.beamResults[index % results.beamResults.length].maxStress / maxBeamStress, 1);
      
      // Interpolate color from green (low stress) to red (high stress)
      const color = interpolateRgb([0, 200, 0], [255, 30, 0], normalizedStress);
      const material = new THREE.MeshStandardMaterial({
        color: new THREE.Color(`rgb(${color[0]}, ${color[1]}, ${color[2]})`),
        metalness: 0.3,
        roughness: 0.6
      });
      
      beam.material = material;
      heatmapMaterialsRef.current.beams.push(material);
    });
    
    // Apply heatmap to columns based on axial loads
    originalGeometryRef.current.columns.forEach((column: THREE.Mesh, index) => {
      // Get normalized stress for this column
      const normalizedStress = Math.min(results.columnAxialLoads[index % results.columnAxialLoads.length] / maxColumnStress, 1);
      
      // Interpolate color from blue (low stress) to purple (high stress)
      const color = interpolateRgb([30, 100, 255], [180, 30, 180], normalizedStress);
      const material = new THREE.MeshStandardMaterial({
        color: new THREE.Color(`rgb(${color[0]}, ${color[1]}, ${color[2]})`),
        metalness: 0.4,
        roughness: 0.6
      });
      
      column.material = material;
      heatmapMaterialsRef.current.columns.push(material);
    });
  }, [results]);

  // Function to create moment/shear diagrams
  const createMomentShearDiagrams = useCallback((type: 'moment' | 'shear') => {
    if (!results || !modalShapesRef) return;
    
    // Remove existing diagrams if they exist
    if (modalShapesRef.current) {
      sceneRef.current.remove(modalShapesRef.current);
    }
    
    // Create a new group for diagrams
    const diagramsGroup = new THREE.Group();
    modalShapesRef.current = diagramsGroup;
    
    // Get parameters
    const {
      buildingLength,
      buildingWidth,
      numberOfStoreys,
      buildingHeight,
      columnsAlongLength,
      columnsAlongWidth,
    } = parameters;
    
    const dx = buildingLength / (columnsAlongLength - 1);
    const dz = buildingWidth / (columnsAlongWidth - 1);
    
    // Get beam results from the calculation
    const { beamResults } = results;
    
    // Scale factors for visualization
    const momentScaleFactor = 0.5 / Math.max(...beamResults.flatMap(br => 
      br.momentDiagram ? Math.max(...br.momentDiagram.map(Math.abs)) : [0.001]
    ));
    
    const shearScaleFactor = 0.5 / Math.max(...beamResults.flatMap(br => 
      br.shearDiagram ? Math.max(...br.shearDiagram.map(Math.abs)) : [0.001]
    ));
    
    let beamIndex = 0;
    
    // Create moment diagrams for X-direction beams
    for (let k = 0; k < numberOfStoreys; k++) {
      for (let j = 0; j < columnsAlongWidth; j++) {
        for (let i = 0; i < columnsAlongLength - 1; i++) {
          if (beamIndex < beamResults.length && beamResults[beamIndex].momentDiagram) {
            const beamResult = beamResults[beamIndex];
            const xStart = i * dx;
            const xEnd = (i + 1) * dx;
            const y = (k + 1) * buildingHeight;
            const z = j * dz;
            
            if (type === 'moment' && beamResult.momentDiagram) {
              // Create moment diagram
              const points = beamResult.momentDiagram.map((moment, idx) => {
                const x = xStart + (idx / (beamResult.momentDiagram!.length - 1)) * dx;
                // Moment is perpendicular to beam axis
                return new THREE.Vector3(x, y + moment * momentScaleFactor, z);
              });
              
              const momentCurve = new THREE.CatmullRomCurve3(points);
              const momentGeometry = new THREE.TubeGeometry(
                momentCurve, beamResult.momentDiagram.length * 2, 0.02, 8, false
              );
              const momentMaterial = new THREE.MeshBasicMaterial({ 
                color: 0x4ade80, // green-400 
                transparent: true,
                opacity: 0.8,
              });
              const momentMesh = new THREE.Mesh(momentGeometry, momentMaterial);
              diagramsGroup.add(momentMesh);
              
              // Add a line at y=0 to represent the beam axis
              const axisGeometry = new THREE.BufferGeometry().setFromPoints([
                new THREE.Vector3(xStart, y, z),
                new THREE.Vector3(xEnd, y, z)
              ]);
              const axisMaterial = new THREE.LineBasicMaterial({ 
                color: 0x94a3b8, // slate-400
                opacity: 0.5,
                transparent: true,
              });
              const axisLine = new THREE.Line(axisGeometry, axisMaterial);
              diagramsGroup.add(axisLine);
            }
            
            if (type === 'shear' && beamResult.shearDiagram) {
              // Create shear diagram
              const points = beamResult.shearDiagram.map((shear, idx) => {
                const x = xStart + (idx / (beamResult.shearDiagram!.length - 1)) * dx;
                // Shear is perpendicular to beam axis
                return new THREE.Vector3(x, y + shear * shearScaleFactor, z);
              });
              
              const shearCurve = new THREE.CatmullRomCurve3(points);
              const shearGeometry = new THREE.TubeGeometry(
                shearCurve, beamResult.shearDiagram.length * 2, 0.02, 8, false
              );
              const shearMaterial = new THREE.MeshBasicMaterial({ 
                color: 0xf97316, // orange-500
                transparent: true,
                opacity: 0.8,
              });
              const shearMesh = new THREE.Mesh(shearGeometry, shearMaterial);
              diagramsGroup.add(shearMesh);
            }
            
            beamIndex++;
          }
        }
      }
    }
    
    // Create diagrams for Z-direction beams (similar approach but along z-axis)
    for (let k = 0; k < numberOfStoreys; k++) {
      for (let i = 0; i < columnsAlongLength; i++) {
        for (let j = 0; j < columnsAlongWidth - 1; j++) {
          if (beamIndex < beamResults.length && beamResults[beamIndex].momentDiagram) {
            const beamResult = beamResults[beamIndex];
            const x = i * dx;
            const y = (k + 1) * buildingHeight;
            const zStart = j * dz;
            const zEnd = (j + 1) * dz;
            
            if (type === 'moment' && beamResult.momentDiagram) {
              // Create moment diagram
              const points = beamResult.momentDiagram.map((moment, idx) => {
                const z = zStart + (idx / (beamResult.momentDiagram!.length - 1)) * dz;
                // Moment is perpendicular to beam axis
                return new THREE.Vector3(x, y + moment * momentScaleFactor, z);
              });
              
              const momentCurve = new THREE.CatmullRomCurve3(points);
              const momentGeometry = new THREE.TubeGeometry(
                momentCurve, beamResult.momentDiagram.length * 2, 0.02, 8, false
              );
              const momentMaterial = new THREE.MeshBasicMaterial({ 
                color: 0x4ade80, // green-400
                transparent: true,
                opacity: 0.8,
              });
              const momentMesh = new THREE.Mesh(momentGeometry, momentMaterial);
              diagramsGroup.add(momentMesh);
              
              // Add a line at y=0 to represent the beam axis
              const axisGeometry = new THREE.BufferGeometry().setFromPoints([
                new THREE.Vector3(x, y, zStart),
                new THREE.Vector3(x, y, zEnd)
              ]);
              const axisMaterial = new THREE.LineBasicMaterial({ 
                color: 0x94a3b8, // slate-400
                opacity: 0.5,
                transparent: true,
              });
              const axisLine = new THREE.Line(axisGeometry, axisMaterial);
              diagramsGroup.add(axisLine);
            }
            
            if (type === 'shear' && beamResult.shearDiagram) {
              // Create shear diagram
              const points = beamResult.shearDiagram.map((shear, idx) => {
                const z = zStart + (idx / (beamResult.shearDiagram!.length - 1)) * dz;
                // Shear is perpendicular to beam axis
                return new THREE.Vector3(x, y + shear * shearScaleFactor, z);
              });
              
              const shearCurve = new THREE.CatmullRomCurve3(points);
              const shearGeometry = new THREE.TubeGeometry(
                shearCurve, beamResult.shearDiagram.length * 2, 0.02, 8, false
              );
              const shearMaterial = new THREE.MeshBasicMaterial({ 
                color: 0xf97316, // orange-500
                transparent: true,
                opacity: 0.8,
              });
              const shearMesh = new THREE.Mesh(shearGeometry, shearMaterial);
              diagramsGroup.add(shearMesh);
            }
            
            beamIndex++;
          }
        }
      }
    }
    
    // Add the diagrams to the scene
    sceneRef.current.add(diagramsGroup);
  }, [parameters, results, sceneRef, modalShapesRef]);

  // Function to visualize modal shapes from dynamic analysis
  const createModalShapesVisualization = useCallback(() => {
    if (!results || !results.dynamicAnalysis || !results.dynamicAnalysis.modalShapes) return;
    
    // Remove existing modal shapes if they exist
    if (modalShapesRef.current) {
      sceneRef.current.remove(modalShapesRef.current);
    }
    
    const modalGroup = new THREE.Group();
    modalShapesRef.current = modalGroup;
    
    // Get modal shapes from results
    const modalShapes = results.dynamicAnalysis.modalShapes || [];
    
    // Create a grid of points for the mode shape visualization
    const { buildingLength, buildingWidth, buildingHeight, numberOfStoreys } = parameters;
    
    // Create a visual representation of the mode shape
    // Here we'll use line segments to connect the mode shape points
    
    // Create points for each storey level
    const points: THREE.Vector3[] = [];
    for (let i = 0; i <= numberOfStoreys; i++) {
      let displacement = 0;
      
      // For the first mode, get the displacement from the mode shape
      if (i > 0 && i <= modalShapes.length && modalShapes[0] && Array.isArray(modalShapes[0])) {
        const modeShape = modalShapes[selectedMode];
        if (modeShape && Array.isArray(modeShape)) {
          const maxDisplacement = Math.max(...modeShape.map(Math.abs));
          displacement = modeShape[i - 1] * buildingLength * 0.1 / maxDisplacement;
        }
      }
      
      // Add the point with displacement in x-direction
      points.push(new THREE.Vector3(
        buildingLength / 2 + displacement,
        i * buildingHeight,
        buildingWidth / 2
      ));
    }
    
    // Create a line to represent the mode shape
    const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);
    const lineMaterial = new THREE.LineBasicMaterial({ 
      color: 0x8b5cf6, // violet-500
      linewidth: 3,
    });
    const line = new THREE.Line(lineGeometry, lineMaterial);
    modalGroup.add(line);
    
    // Add markers at each story level
    for (let i = 0; i <= numberOfStoreys; i++) {
      const markerGeometry = new THREE.SphereGeometry(0.1, 16, 16);
      const markerMaterial = new THREE.MeshBasicMaterial({ color: 0xec4899 }); // pink-500
      const marker = new THREE.Mesh(markerGeometry, markerMaterial);
      marker.position.copy(points[i]);
      modalGroup.add(marker);
    }
    
    // Add the mode shape visualization to the scene
    sceneRef.current.add(modalGroup);
    
    // Add text label showing the frequency
    if (results.dynamicAnalysis.frequencies[selectedMode]) {
      const frequency = results.dynamicAnalysis.frequencies[selectedMode];
      
      // Create a canvas for the text
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.width = 256;
      canvas.height = 64;
      
      if (context) {
        context.fillStyle = '#ffffff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        context.font = 'Bold 24px Arial';
        context.fillStyle = '#000000';
        context.textAlign = 'center';
        context.fillText(`Mode ${selectedMode + 1}: ${frequency.toFixed(2)} Hz`, canvas.width / 2, canvas.height / 2);
        
        // Create a texture from the canvas
        const texture = new THREE.CanvasTexture(canvas);
        texture.needsUpdate = true;
        
        // Create sprite material
        const spriteMaterial = new THREE.SpriteMaterial({ map: texture });
        const sprite = new THREE.Sprite(spriteMaterial);
        sprite.scale.set(4, 1, 1);
        sprite.position.set(buildingLength / 2, buildingHeight * numberOfStoreys + 1, buildingWidth / 2);
        
        modalGroup.add(sprite);
      }
    }
  }, [parameters, results, selectedMode, sceneRef, modalShapesRef]);

  // Toggle modal shapes visualization
  const toggleModalShapes = useCallback(() => {
    setShowModalShapes(prev => !prev);
  }, []);

  // Animation loop
  const animate = useCallback(() => {
    if (controlsRef.current) {
      controlsRef.current.update();
    }
    if (rendererRef.current && sceneRef.current && cameraRef.current) {
      rendererRef.current.render(sceneRef.current, cameraRef.current);
    }
    requestRef.current = requestAnimationFrame(animate);
  }, [controlsRef, rendererRef, sceneRef, cameraRef]);

  // Add useEffect for scene initialization
  useEffect(() => {
    const sceneSetup = initScene();
    if (!sceneSetup) return;
    
    const { camera, renderer, controls } = sceneSetup;
    
    // Store refs
    cameraRef.current = camera;
    rendererRef.current = renderer;
    controlsRef.current = controls;
    
    // Build initial geometry
    buildGeometry();
    
    // Start animation loop
    animate();
    
    // Capture the current value of the ref for cleanup
    const currentMountRef = mountRef.current;
    
    // Cleanup on unmount
    return () => {
      window.removeEventListener('resize', handleResize);
      if (currentMountRef && rendererRef.current) {
        currentMountRef.removeChild(rendererRef.current.domElement);
      }
      if (rendererRef.current) {
        rendererRef.current.dispose();
      }
      if (requestRef.current !== null) {
        cancelAnimationFrame(requestRef.current);
      }
    };
  }, [handleResize, initScene, buildGeometry, animate]);

  // Add useEffect for visualization updates
  useEffect(() => {
    if (!mountRef.current) return;
    
    // Update deformed geometry when showDeformed changes
    if (showDeformed) {
      showDeformedGeometry(deformationScale);
    } else {
      resetDeformedGeometry();
    }
    
    // Update stress heatmap when showStressHeatmap changes
    if (showModalShapes) {
      createModalShapesVisualization();
    } else if (modalShapesRef.current) {
      sceneRef.current.remove(modalShapesRef.current);
    }
    
  }, [
    showDeformed, 
    deformationScale, 
    createModalShapesVisualization, 
    showDeformedGeometry, 
    resetDeformedGeometry
  ]);

  // Add mode selector UI
  const renderModeSelector = () => (
    <div className="absolute top-20 right-4 bg-white p-2 rounded-lg shadow-md">
      <label className="text-sm font-medium text-gray-700">Vibration Mode:</label>
      <select
        value={selectedMode}
        onChange={(e) => setSelectedMode(Number(e.target.value))}
        className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
      >
        {[...Array(10)].map((_, i) => (
          <option key={i} value={i}>Mode {i + 1}</option>
        ))}
      </select>
    </div>
  );

  return (
    <div className="relative h-[500px] md:h-[600px] lg:h-[700px] rounded-xl overflow-hidden">
      {/* Visualization controls overlay */}
      <div className="absolute top-4 right-4 z-10 flex flex-col gap-2">
        <div className="bg-white/80 backdrop-blur-sm p-2 rounded-lg shadow-md border border-gray-200 flex flex-col gap-2">
          <div className="flex gap-2">
            <button
              onClick={() => setViewMode('default')}
              className={`btn btn-sm ${viewMode === 'default' ? 'btn-primary' : 'btn-secondary'}`}
              title="Default view"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
            </button>
            <button
              onClick={() => setViewMode('stress')}
              className={`btn btn-sm ${viewMode === 'stress' ? 'btn-primary' : 'btn-secondary'}`}
              title="Stress visualization"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 10a2 2 0 00-2 2v2a2 2 0 002 2h12a2 2 0 002-2v-2a2 2 0 00-2-2H4a2 2 0 00-2-2V4a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-2z" />
              </svg>
            </button>
            <button
              onClick={() => setViewMode('deflection')}
              className={`btn btn-sm ${viewMode === 'deflection' ? 'btn-primary' : 'btn-secondary'}`}
              title="Deflection visualization"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M5 2a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H6v1a1 1 0 01-2 0V5a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM11 5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v2z" />
              </svg>
            </button>
          </div>
          <div className="flex gap-2">
            <button
              onClick={() => setShowDeformed(!showDeformed)}
              className={`btn btn-sm ${showDeformed ? 'btn-primary' : 'btn-secondary'}`}
              title={showDeformed ? "Show original shape" : "Show deformed shape"}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
              </svg>
            </button>
            <button
              onClick={() => setShowGrid(!showGrid)}
              className={`btn btn-sm ${showGrid ? 'btn-primary' : 'btn-secondary'}`}
              title={showGrid ? "Hide grid" : "Show grid"}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 10a2 2 0 00-2 2v2a2 2 0 002 2h12a2 2 0 002-2v-2a2 2 0 00-2-2H4a2 2 0 00-2-2V4a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-2z" />
              </svg>
            </button>
            <button
              onClick={() => setShowShadows(!showShadows)}
              className={`btn btn-sm ${showShadows ? 'btn-primary' : 'btn-secondary'}`}
              title={showShadows ? "Hide shadows" : "Show shadows"}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path d="M5 2a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H6v1a1 1 0 01-2 0V5a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 012-2h2a1 1 0 012 2v2a1 1 0 01-2 2h-2a1 1 0 01-2-2V5zM12 13a1 1 0 012-2h2a1 1 0 012 2v2a1 1 0 01-2 2h-2a1 1 0 01-2-2v-2z" />
            </svg>
          </button>
        </div>
        <div className="bg-white/80 backdrop-blur-sm p-2 rounded-lg shadow-md border border-gray-200 flex gap-2">
          <button
            onClick={toggleModalShapes}
            className={`btn btn-sm ${showModalShapes ? 'btn-primary' : 'btn-secondary'}`}
            title={showModalShapes ? "Hide modal shapes" : "Show modal shapes"}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 2a2 2 0 00-2 2v2a2 2 0 002 2h12a2 2 0 002-2v-2a2 2 0 00-2-2H4a2 2 0 00-2-2V4a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-2z" />
            </svg>
          </button>
          <button
            onClick={() => createMomentShearDiagrams('moment')}
            className="btn btn-sm btn-secondary"
            title="Show moment diagram"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 012-2h2a1 1 0 012 2v12a1 1 0 01-1 1h-2a1 1 0 110-2H4z" />
            </svg>
          </button>
          <button
            onClick={() => createMomentShearDiagrams('shear')}
            className="btn btn-sm btn-secondary"
            title="Show shear diagram"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 012-2h2a1 1 0 012 2v12a1 1 0 01-1 1h-2a1 1 0 110-2H4z" />
            </svg>
          </button>
        </div>
      </div>

      {/* Legend for stress/deflection visualization */}
      {viewMode !== 'default' && (
        <div className="absolute bottom-4 left-4 bg-white/80 backdrop-blur-sm p-3 rounded-lg shadow-md border border-gray-200">
          <h4 className="text-sm font-semibold mb-2">{viewMode === 'stress' ? 'Stress' : 'Deflection'} Legend</h4>
          <div className="flex items-center">
            <div className="w-full h-4 bg-gradient-to-r from-green-500 via-yellow-500 to-red-500 rounded"></div>
            <div className="flex justify-between w-full text-xs mt-1">
              <span>Low</span>
              <span>High</span>
            </div>
          </div>
        </div>
      )}

      {/* Deformation scale slider */}
      {showDeformed && (
        <div className="absolute bottom-4 right-4 bg-white/80 backdrop-blur-sm p-3 rounded-lg shadow-md border border-gray-200">
          <label htmlFor="deformation-scale" className="block text-xs font-medium text-gray-700 mb-1">
            Deformation Scale: {deformationScale}x
          </label>
          <input
            id="deformation-scale"
            type="range"
            min="1"
            max="2000"
            step="50"
            value={deformationScale}
            onChange={(e) => setDeformationScale(parseInt(e.target.value))}
            className="range-slider w-full"
          />
        </div>
      )}
      
      {/* Mode selector */}
      {renderModeSelector()}
      
      {/* Visualization canvas */}
      <div ref={mountRef} className="w-full h-full bg-gradient-to-b from-blue-50 to-gray-50" />
    </div>
  );
};